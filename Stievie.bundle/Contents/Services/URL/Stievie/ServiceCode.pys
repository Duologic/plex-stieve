import channels
from lxml import html

# We require the requests module which is not included by default in Plex.
# Although the requests module is included in this bundle (Libraries/Shared/requests)
# it is not loaded automatically. We need to extend the sys.path with the location
# of the module. Do to so we require the inspect, sys and os module. The first
# are included by default in Plex, the os module is also included in this bundle
# (Libraries/Shared Code) and needs to be loaded separately.
import inspect
import sys
import os

FILE_PATH = inspect.getfile(inspect.currentframe())
BUNDLE_PATH = os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(FILE_PATH))))
MODULE_PATH = os.path.join(BUNDLE_PATH, 'Libraries', 'Shared')
if MODULE_PATH not in sys.path:
    sys.path.append(MODULE_PATH)

import requests

####################################################################################################
def NormalizeURL(url):
    return url

####################################################################################################
def MetadataObjectForURL(url):

    for channel in channels.channelList:
        if channel.url_name in url:
            break

    return VideoClipObject(
        title = channel.name,
        summary = "Kijk live naar " + channel.name + "!",
        thumb = channel.logo_name
    )

####################################################################################################
def MediaObjectsForURL(url):

  return [
		MediaObject(
			parts = [
				PartObject(
					key=HTTPLiveStreamURL(Callback(PlayVideo, url=url))
				)
			],
			video_resolution = 'sd',
			audio_channels = 1,
			optimized_for_streaming = True
		)
	]

####################################################################################################
@indirect
def PlayVideo(url, **kwargs):
    video_url = requests.get(StreamURL(url)).content.split('\n')[3]
    return IndirectResponse(VideoClipObject, key=video_url)

####################################################################################################
def StreamURL(url):

    authorization_header = {
        'Authorization' : "access_token=" + GetAccessToken()
    }

    stream_url_resp = requests.get(url, headers=authorization_header)
    return  stream_url_resp.json()['response']['url']['hls']

####################################################################################################
def GetAccessToken():

    login_data = {
        'loginID' : Prefs['username'],
        'password' : Prefs['password'],
        'APIKey' : '3_OEz9nzakKMkhPdUnz41EqSRfhJg5z9JXvS4wUORkqNf2M2c1wS81ilBgCewkot97'
    }

    login_resp = requests.post('https://accounts.eu1.gigya.com/accounts.login', login_data)
    uid=login_resp.json()['UID']
    uidSignature=login_resp.json()['UIDSignature']
    signatureTimestamp=login_resp.json()['signatureTimestamp']

    search_page_resp = requests.get('http://watch.stievie.be')
    search_page_resp_xml = html.fromstring(search_page_resp.content)
    script_tag = search_page_resp_xml.xpath("//body//script")[0].text
    config_js_url = "http://static.watch.stievie.be/config-" + script_tag.split('config-')[1].split('"')[0]
    config_js_resp = requests.get(config_js_url)
    apiKey = config_js_resp.content.split('medialaan:{apiKey:"')[1].split('"')[0]

    token_data = {
        'database': 'stievie-sso',
        'uid': uid,
        'signature': uidSignature,
        'timestamp': signatureTimestamp
    }
    token_header = {
        'Authorization' : "apikey=" + apiKey
    }
    token_resp = requests.get('http://user.medialaan.io/user/v1/gigya/request_token', headers=token_header, params = token_data)

    return token_resp.json()['response']
