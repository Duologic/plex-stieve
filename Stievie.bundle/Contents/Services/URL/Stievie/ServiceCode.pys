import channels

# We require the requests module which is not included by default in Plex.
# Although the requests module is included in this bundle (Libraries/Shared/requests)
# it is not loaded automatically. We need to extend the sys.path with the location
# of the module. Do to so we require the inspect, sys and os module. The first
# are included by default in Plex, the os module is also included in this bundle
# (Libraries/Shared Code) and needs to be loaded separately.
import inspect
import sys
import os

file_location = inspect.getfile(inspect.currentframe())
bundle_location = os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(file_location))))
sys.path.append(os.path.join(bundle_location, 'Libraries/Shared'))

import requests

####################################################################################################
def NormalizeURL(url):
    return url

####################################################################################################
def MetadataObjectForURL(url):

    for channel in channels.channelList:
        if channel.url_name in url:
            break

    return VideoClipObject(
        title = channel.name,
        summary = "Kijk live naar " + channel.name + "!",
        thumb = channel.logo_name
    )

####################################################################################################
def MediaObjectsForURL(url):

  return [
		MediaObject(
			parts = [
				PartObject(
					key=HTTPLiveStreamURL(Callback(PlayVideo, url=url))
				)
			],
			video_resolution = 'sd',
			audio_channels = 1,
			optimized_for_streaming = True
		)
	]

####################################################################################################
@indirect
def PlayVideo(url, **kwargs):
    video_url = requests.get(url).content.split('\n')[3]
    return IndirectResponse(VideoClipObject, key=video_url)
